package com.opencredo.test;



import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchProviderException;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.stream.Collectors;

public class EmailAdaptor {

    private static final String IMAP_HOST = "imap.gmail.com";
    private static final String IMAP_PROTOCOL = "imap";

    private static final String SMTP_HOST = "stmp.gmail.com";
    private static final String SMTP_PROTOCOL = "stmp.gmail.com";


    private static final String EMAIL_ADDRESS = "";
    private static final String PASSWORD = "";
    private static final int MAX_RECENT_MESSAGES_TO_SEARCH = 1000;
    private static final String INBOX_FOLDER = "INBOX";


    private final Session session;
    private Store store;

    public EmailAdaptor() throws NoSuchProviderException {
        final Properties props = new Properties();
        props.setProperty("mail.imap.ssl.enable", "true");
        props.put("mail.smtp.starttls.enable", true);
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.user", EMAIL_ADDRESS);
        props.put("mail.smtp.password", PASSWORD);
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", true);

        session = Session.getDefaultInstance(props,
                new Authenticator() {
                    protected PasswordAuthentication  getPasswordAuthentication() {
                        return new PasswordAuthentication(
                                EMAIL_ADDRESS, PASSWORD);
                    }
                });

    }

    public EmailAdaptor connect() throws MessagingException {
        store = session.getStore(IMAP_PROTOCOL);

        store.connect(IMAP_HOST, EMAIL_ADDRESS, PASSWORD);
        return this;
    }

    public void disconnect() throws MessagingException {
        store.close();
    }

    public void deleteOldInboxMessages(final int messagesToKeep) throws MessagingException {
        final Folder inbox = store.getFolder(INBOX_FOLDER);
        inbox.open(Folder.READ_WRITE);

        Arrays.asList(inbox.getMessages()).stream()
                .filter(message -> message.getMessageNumber() > messagesToKeep)
                .forEach(this::deleteMessage);

        inbox.close(true);
    }


    public List<Message> getRecentEmails() throws MessagingException {
        final Folder inbox = store.getFolder(INBOX_FOLDER);
        inbox.open(Folder.READ_ONLY);

        List<Message> messages = Arrays.asList(inbox.getMessages());

        messages = messages.stream()
                .limit(MAX_RECENT_MESSAGES_TO_SEARCH)
                .collect(Collectors.toList());

        inbox.close(false);

        return messages;
    }

    public boolean messageSubjectContains(final String searchTerm, final Message message) {
        try {
            return message.getSubject().contains(searchTerm);
        } catch (final MessagingException e) {
            e.printStackTrace();
        }
        return false;
    }

    public void deleteMessage(final Message message) {
        try {
            message.setFlag(Flags.Flag.DELETED, true);
        } catch (final MessagingException e) {
            e.printStackTrace();
        }
    }


    public void sendTestEmail() throws MessagingException, UnsupportedEncodingException {
        String msgBody = "This is a test email generated by the Opencredo Test Framework!";

        Message msg = new MimeMessage(session);
        msg.setFrom(new InternetAddress("test@opencredo-testing.com", "OpenCredo tester"));
        msg.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_ADDRESS, "Mr/Ms Recepient"));
        msg.setSubject("OpenCredo Test Email #" + new Random().nextInt(10000));
        msg.setText(msgBody);
        Transport.send(msg);
    }

    public List<Message> deleteTestEmails() {
        return null;
    }
}
